# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  image: String
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  credentials: Credential!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthProvider {
  type: AuthProviderType!
  uid: String!
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

type Credential {
  uid: String!
  email: String!
  passwordHash: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Item {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type Query {
  users(distinct: [UserScalarFieldEnum!], where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): [User!]!
  getCredentials(email: String!): User
  getAuthProvider(uid: String!): AuthProvider
  user(where: UserWhereUniqueInput): User!
  items(distinct: [ItemScalarFieldEnum!], where: ItemWhereInput, orderBy: [ItemOrderByWithRelationInput!], cursor: ItemWhereUniqueInput, take: Int, skip: Int): [Item!]!
  item(where: ItemWhereUniqueInput!): Item!
}

enum UserScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
  image
}

input UserWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  image: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input StringFilter {
  mode: QueryMode
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

enum QueryMode {
  default
  insensitive
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input UserOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  image: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UserWhereUniqueInput {
  uid: String!
}

enum ItemScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
}

input ItemWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
}

input IntFilter {
  equals: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input ItemOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
}

input ItemWhereUniqueInput {
  id: Int!
}

type Mutation {
  createUserWithProvider(createUserWithProviderInput: CreateUserWithProviderInput!): User!
  createUserWithCredentials(createUserWithCredentialsInput: CreateUserWithCredentialsInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput): User!
  createItem(createItemInput: CreateItemInput!): Item!
  updateItem(updateItemInput: UpdateItemInput!): Item!
  removeItem(where: ItemWhereUniqueInput!): Item!
}

input CreateUserWithProviderInput {
  image: String
  uid: String!
  name: String!
  type: AuthProviderType!
}

input CreateUserWithCredentialsInput {
  name: String!
  email: String!
  password: String!
  image: String
}

input UpdateUserInput {
  image: String
  uid: String!
  name: String
}

input CreateItemInput {
  name: String!
}

input UpdateItemInput {
  name: String
  id: Int!
}